// Spin-off of "Project: Hoppy Beaver Extreme" by John

/*  Changes made to original:
************************************************

  (1) Inverted collision mechanism.
  
  (2) Added obstacles, additional enemies, an HUD,
   interstitials (with instructions) and end credits.

  (3) Made the original game more difficult by
  introducing a second level.

  (4) Added the required >30 lines of code.
  
************************************************/


/*  Global variables:
************************************************/

var app,
    beaver,
    Beaver,
    CONFIG,
    CreateButton,
    CreateFooter,
    CreateInstructions,
    CreateMenu,
    CreateText,
    CREDITS,
    creditsFormat,
    creditsScreen,
    disableMouse,
    enableBeaver,
    Enemy,
    enemies,
    enemyVal,
    gameCompleteScreen,
    gap,
    GRAPHICS,
    i,
    instructionStatus,
    interstitial,
    Item,
    items,
    level,
    levelConditions,
    screen1,
    screen2,
    screen2Instructions,
    screen3,
    screen4,
    screen4Instructions,
    screen5,
    scrollX,
    soundPlayed,
    SOUNDS,
    speed,
    TEXT_LABELS,
    UI_STYLES,
    updateClock;


/*  App object with various game properties:
************************************************/
   
app = {
    mode: 'easy',
    difficulty: {
        EASY: {
            scoreNeeded: 10,
            scrollSpeed: 2
        },
        NORMAL: {
            scoreNeeded: 10,
            scrollSpeed: 4
        },
        HARD: {
            scoreNeeded: 30,
            scrollSpeed: 4
        }
    },
    timeVal: {
        h: 0,
        m: 0,
        s: 0
    },
    userProgress: {
        screen: 1,
        scoreTotal: 0,
        difficulty: 'easy'
    },
    levelCountdown: 10,
    COUNTDOWNVAL: 10
};


/*  Arrays to contain generated item and enemies:
************************************************/

items = []; enemies = [];


/*  This object keeps tab on which instructions
    have been displayed:
************************************************/

instructionStatus = {
    screen1: false,
    screen2: false,
    screen3: false,
    screen4: false
};


/*  CONFIG object contains properties related to
    level settings and instructions:
************************************************/

CONFIG = {
    INSTRUCTIONS: {
        LVL_1: {
            TXT_I1A: 'Collect ' + app.difficulty.EASY.scoreNeeded + ' Hoppy toys.',
            TXT_I1B: 'Watch for the Piceratopses!'
        },
        LVL_2: {
            TXT_I1A: 'Now it gets difficult.',
            TXT_I1B: 'Much faster and much more dangerous!'
        }
    },
    LEVEL_MODE: {
        LVL_1: {
            difficulty: 'easy',
            scoreNeeded: app.difficulty.EASY.scoreNeeded,
            scrollSpeed: app.difficulty.EASY.scrollSpeed
        }
    }
};


/*  GRAPHICS object with graphics to be used
    throughout the game:
************************************************/

GRAPHICS = {
    CHARACTER_SPRITE: {
        HAPPY: 'creatures/Hopper-Happy',
        JUMPING: 'creatures/Hopper-Jumping',
        COOL: 'creatures/Hopper-Cool'
    },
    LEVEL: {
        GRASS: {
            UPPER: 'cute/GrassBlock',
            LOWER: 'cute/DirtBlock'
        },
        TREES: {
            TALL: 'cute/TreeTall',
            UGLY: 'cute/TreeUgly',
            SHORT: 'cute/TreeShort'
        },
        STONE: {
            RAMP_NORTH: 'cute/RampNorth'
        }
    },
    ENEMY: {
        FLYING: 'avatars/piceratops-sapling'
    }
};


/*  TEXT_LABELS object with text to be used
    throughout the game:
************************************************/

TEXT_LABELS = {
    HUD: {
        SCORE: 'Score: '
    },
    HEADING: 'Hoppy Beaver',
    SUB_HEADING: '[Extreme]',
    FOOTER: 'Game by John for Khan Academy',
    FINISH: 'Finish',
    GAME_BEGIN: 'Begin >',
    LEVEL: 'Level',
    LEVEL_BEGIN: 'Level beginning in ',
    LEVEL_NEXT: 'Next Level',
    LEVEL_COMPLETE: 'Level Complete!',
    GAME_COMPLETE: 'GAME COMPLETE',
    CONGRATULATIONS: 'CONGRATULATIONS',
    YOU_DID_IT: 'You did it!'
};


/*  CREDITS object with credit text to be used
    at the end — when game has been completed:
************************************************/

CREDITS = {
    END_CREDIT_HEADING: 'Hoppy Beaver',
    END_CREDIT_PROJECT: 'Project for Khan Academy',
    END_CREDIT_STARRING: 'Starring Hoppy (as himself)',
    END_CREDITS: [
        ['Programming', 'John Martin'],
        ['UI Design', 'John Martin'],
        ['Water Boy', 'John Martin'],
        ['Donut Getter', 'John Martin'],
        ['Donut Eater', 'John Martin'],
        ['Awesomness Consultant', 'John Martin'],
        ['Graphic Design', 'Khan Academy'],
        ['Sounds', 'artisticdude & spongejr'],
        ['Programming', 'John Martin'],
        ['Coffee Drinker', 'John Martin'],
        ['Stunts', 'Hoppy (himself)'],
        ['Cheesy Credits Maker', 'John Martin']
    ]
};


/*  SOUNDS object with sounds to be used
    throughout the game:
************************************************/

SOUNDS = {
    ATTACK: 'retro/hit2',
    COLLECT_ITEM: 'rpg/metal-chime',
    END_LEVEL: 'retro/laser4'
};


/*  UI_STYLES contains style properties:
************************************************/

UI_STYLES = {
    COLOURS: {
        CYAN: [41, 204, 217],
        DARK: [0, 0, 85],
        RED: [215, 70, 70],
        WHITE: [255, 255, 255],
        YELLOW: [255, 210, 53]
    },
    FONT_SIZE: {
        XS: 8,
        SM: 10,
        MD: 14,
        LG: 24,
        XL: 48
    },
};


/*  These variables keep tabs on the level,
    the amount a character has scrolled
    (horizontally) and their speed:
************************************************/

level = 0;
scrollX = 0;
speed = 2;


/*  Beaver (Hopper) constructor:
************************************************/

Beaver = function(x, y) {
    this.img = getImage(GRAPHICS.CHARACTER_SPRITE.HAPPY);
    this.items = 0;
    this.x = x;
    this.y = y;
};


/*  Beaver draw function:
************************************************/

Beaver.prototype.draw = function() {
    fill(255, 0, 0);
    this.y = constrain(this.y, 50, height-90);
    image(this.img, this.x, this.y, 40, 40);
};


/*  Beaver hop function:
************************************************/

Beaver.prototype.hop = function() {
    this.img = getImage(GRAPHICS.CHARACTER_SPRITE.JUMPING);
    this.y -= 5;
};


/*  Beaver fall function:
************************************************/

Beaver.prototype.fall = function() {
    this.img = getImage(GRAPHICS.CHARACTER_SPRITE.HAPPY);
    this.y += 5;
};


/*  Beaver checkForItemGrab function. If beaver
    (Hopper) collides with item, this function
    is called:
************************************************/

Beaver.prototype.checkForItemGrab = function(item) {
    if ((item.x >= this.x &&
         item.x <= (this.x + 40)) &&
        (item.y >= this.y &&
         item.y <= (this.y + 40))) {
         item.y = -400;
        this.items++;
        app.userProgress.scoreTotal++;
        playSound(getSound(SOUNDS.COLLECT_ITEM));
    }
};


/*  Beaver checkForAttack function. If beaver
    (Hopper) collides with enemy, this function
    is called:
************************************************/

Beaver.prototype.checkForAttack = function(item) {
    if ((item.x >= this.x &&
         item.x <= (this.x + 40)) &&
        (item.y >= this.y &&
         item.y <= (this.y + 40))) {
         item.y = -400;
        app.userProgress.scoreTotal--;
        playSound(getSound(SOUNDS.ATTACK));
    }
};


/*  Create new beaver object:
************************************************/

beaver = new Beaver(120, 300);


/*  Item constructor:
************************************************/

Item = function(x, y) {
    this.x = x;
    this.y = y;
    this.img = getImage(GRAPHICS.CHARACTER_SPRITE.HAPPY);
};


/*  Item draw function:
************************************************/

Item.prototype.draw = function() {
    image(this.img, this.x, this.y, 30, 30);
};


/*  Enemy constructor function:
************************************************/

Enemy = function(x, y) {
    this.x = x;
    this.y = y;
    this.img = getImage(GRAPHICS.ENEMY.FLYING);
};


/*  Enemy draw function:
************************************************/

Enemy.prototype.draw = function() {
    image(this.img, this.x, this.y, 30, 30);
};


/*  Enemy value properties. This defines the
    amount, height deviation and spacing
    between enemies:
************************************************/

enemyVal = {
  amount: 200,
  heightDev: 1.3,
  spacing: 120
};


/*  Push items to screen:
************************************************/

for (i = 0; i < 100; i++) {
    items.push
    (new Item(i * 180 + 300, random(52, 259)));
}


/*  Push enemies to screen:
************************************************/

for (i = 0; i < enemyVal.amount; i++) {
    enemies.push
    (new Enemy(i * enemyVal.spacing, random(0, height / enemyVal.heightDev)));
}


/*  Constructor that creates menus:
************************************************/

CreateMenu = function(o) {
    var backgroundColour = o.backgroundColor,
        colourVal = o.color,
        fontSz = o.fontSize;

    // Animate with time intervals:

    if (app.timeVal.s % 2 === 0) { textSize(fontSz); }
    else { textSize(fontSz - 10); }

    if (app.timeVal.s % 3 === 0) {
            background(backgroundColour[0] - 10,
            backgroundColour[1] - 20,
            backgroundColour[2] - 20);
    } else {
        background(backgroundColour[0], backgroundColour[1], backgroundColour[2]);
    }

    fill(colourVal[0], colourVal[1], colourVal[2]);

    if (o.img) { image(getImage(GRAPHICS.CHARACTER_SPRITE.JUMPING), 249, 169, 100, 100); }

    for (i = 0; i < o.text.length; i++) {
        text(o.text[i].values.title.content,
             o.text[i].values.title.x,
             o.text[i].values.title.y,
             o.text[i].values.title.width,
             o.text[i].values.title.height);
        textSize(o.text[i].values.title.fontSize);
        textAlign(o.text[i].values.title.alignment);
    }
};


/*  Constructor that creates text:
************************************************/

CreateText = function
(alignment, content, fontSize, height, width, x, y) {
    return {
        title: {
                alignment: alignment,
                content: content,
                fontSize: fontSize,
                height: height,
                width: width,
                x: x,
                y: y
            }
    };
};


/*  Constructor that creates buttons:
************************************************/

CreateButton = function(o) {
    var backgroundColour = o.backgroundColor,
        colourVal = o.color,
        rectDimensions, rectTextDimensions,
        setButtonState,
        fontSz = o.fontSize,
        textValue,
        tone = {
            highlight: 30,
            lowlight: -30
        };

    // Rectangle shape and text objects:

    rectDimensions = {
        width: width/2,
        height: height/2/2/2,
        x: width/2 - ((width/2)/2),
        y: height/2 + ((height/5)/2)
    };

    rectTextDimensions = {
        height: rectDimensions.height/2/2,
        width: width/2,
        x: (width/2 - ((width/2)/2)) * 2,
        y: height/2 + ((height/5)/2) + rectDimensions.height/1.5
    };

    setButtonState = function(obj) {
        fill(obj.bkgCol[0],
             obj.bkgCol[1],
             obj.bkgCol[2]);
        rect(rectDimensions.x, rectDimensions.y, rectDimensions.width, rectDimensions.height);
        textAlign(CENTER);
        textSize(fontSz);
        fill(obj.txtCol[0],
             obj.txtCol[1],
             obj.txtCol[2]);
        textValue = CreateText(
        CENTER, o.text, 10, 100, 50, rectTextDimensions.x, rectTextDimensions.y);
        text(textValue.title.content,
             textValue.title.x,
             textValue.title.y);
    };

    setButtonState({
        txtCol: [colourVal[0], colourVal[1], colourVal[2]],
        bkgCol: [backgroundColour[0] + tone.lowlight,
                 backgroundColour[1] + tone.lowlight,
                 backgroundColour[2] + tone.lowlight]
    });

    if (mouseX > rectDimensions.x && mouseX < rectDimensions.x + rectDimensions.width &&
        mouseY > rectDimensions.y && mouseY < rectDimensions.y + rectDimensions.height) {
        cursor(HAND);
        setButtonState({
        txtCol: [colourVal[0], colourVal[1], colourVal[2]],
        bkgCol: [UI_STYLES.COLOURS.RED[0] +
                 tone.highlight,
                 UI_STYLES.COLOURS.RED[1],
                 UI_STYLES.COLOURS.RED[2]]
        });
        mouseReleased = function() {
            app.userProgress.screen++;
        };
    }
};


/*  Constructor that creates footer text:
************************************************/

CreateFooter = function(o) {
    var footer = o.title;
    textSize(footer.fontSize);
    text(footer.content, footer.width, footer.height);
};


/*  Constructor that creates instructions:
************************************************/

CreateInstructions = function(o) {
    background(UI_STYLES.COLOURS.DARK[0],
               UI_STYLES.COLOURS.DARK[1],
               UI_STYLES.COLOURS.DARK[2]);
    
    fill(UI_STYLES.COLOURS.RED[0],
         UI_STYLES.COLOURS.RED[1],
         UI_STYLES.COLOURS.RED[2]);
    textSize(UI_STYLES.FONT_SIZE.XL + 10);
    text(TEXT_LABELS.LEVEL +
    (level),
    0, 100, width, 100);
    fill(UI_STYLES.COLOURS.WHITE[0],
         UI_STYLES.COLOURS.WHITE[1],
         UI_STYLES.COLOURS.WHITE[2]);
    textSize(UI_STYLES.FONT_SIZE.LG - 9);
    text(o.INSTRUCTIONS.a + '\n\n' +
         o.INSTRUCTIONS.b,
    width/2/2, 160, width/2, height);
    fill(UI_STYLES.COLOURS.YELLOW[0],
         UI_STYLES.COLOURS.YELLOW[1],
         UI_STYLES.COLOURS.YELLOW[2]);
    textSize(UI_STYLES.FONT_SIZE.MD + 3);
    text(TEXT_LABELS.LEVEL_BEGIN +
         Math.floor(app.levelCountdown) + '...',
    width/2/2, 340, width - 70, height);
};


/*  Function to apply certain level settings:
************************************************/

levelConditions = function(o) {
        var scoreNeeded, gameDifficulty,
            gameUserProgress;
        
        scoreNeeded = 0;
        gameDifficulty = app.difficulty;
        gameUserProgress = app.userProgress;

        switch(o.difficulty) {
            case 'easy':
                scoreNeeded = gameDifficulty.EASY.scoreNeeded;
                break;
            case 'normal':
                scoreNeeded = gameDifficulty.NORMAL.scoreNeeded;
                break;
            case 'hard':
                scoreNeeded = gameDifficulty.HARD.scoreNeeded;
        }

        if (gameUserProgress.scoreTotal >= scoreNeeded) {

        app.userProgress.screen = o.nextScreen;
        app.userProgress.scoreTotal = o.nextScore;
        }
    };


/*  Function to load screen 1:
************************************************/

screen1 = function() {
    var titleFooter,
        titleScreen,
        titleScreenBtn,
        titleScreenFooter;

    noStroke();

    titleScreen = CreateMenu({
        backgroundColor: UI_STYLES.COLOURS.DARK,
        color: UI_STYLES.COLOURS.WHITE,
        fontSize: UI_STYLES.FONT_SIZE.XL + 10,
        img: true,
        text: [{
            values: CreateText(CENTER,
                    TEXT_LABELS.HEADING,
                    UI_STYLES.FONT_SIZE.LG - 5, 200,
                    width, 0, 125)
            }, {
            values: CreateText(CENTER,
                    TEXT_LABELS.SUB_HEADING,
                    UI_STYLES.FONT_SIZE.XL, 200, width, 0, 180)
            }]
    });

    titleScreenBtn = CreateButton({
        backgroundColor: [
            UI_STYLES.COLOURS.RED[0],
            UI_STYLES.COLOURS.RED[1],
            UI_STYLES.COLOURS.RED[2]],
        color: [
            UI_STYLES.COLOURS.YELLOW[0],
            UI_STYLES.COLOURS.YELLOW[1],
            UI_STYLES.COLOURS.YELLOW[2]],
        fontSize: UI_STYLES.FONT_SIZE.LG,
        text: TEXT_LABELS.GAME_BEGIN
    });

    titleFooter = CreateText(CENTER,
                    TEXT_LABELS.FOOTER,
                    UI_STYLES.FONT_SIZE.XS,
                    height - 25, width/2, 0, 180);

    titleScreenFooter = CreateFooter(titleFooter);
};


/*  Function to load screen 2 instructions:
************************************************/

screen2Instructions = function() {
    level = 1;

    if(!instructionStatus.screen2) {
        app.levelCountdown = app.COUNTDOWNVAL;
        instructionStatus.screen2 = true;
    }

    CreateInstructions({
        INSTRUCTIONS: {
            a: CONFIG.INSTRUCTIONS.LVL_1.TXT_I1A,
            b: CONFIG.INSTRUCTIONS.LVL_1.TXT_I1B
        }
    });

    if (app.levelCountdown >= 0) {
        app.levelCountdown -= 0.04;
    } else {
       screen2();
       scrollX -= speed;
       enableBeaver();
    }
};


/*  Function to load screen 2:
************************************************/

screen2 = function() {
    var difficulty,
        gfx,
        grass,
        mode, 
        scoreNeeded,
        scroller,
        scrollSpeed,
        toysNeeded,
        treeTall,
        treeUgly;

    mode = CONFIG.LEVEL_MODE.LVL_1;
    difficulty = mode.difficulty;
    scoreNeeded = mode.scoreNeeded;
    scrollSpeed = mode.scrollSpeed;
    toysNeeded = 'Need: ' +
    (scoreNeeded - app.userProgress.scoreTotal);
    speed = scrollSpeed;

    levelConditions({
        difficulty: difficulty,
        nextScore: 0,
        nextScreen: 3
    });

    gfx = {
        backgroundColour: UI_STYLES.COLOURS.CYAN,
        bkgHud: UI_STYLES.COLOURS.DARK,
        colourVal: UI_STYLES.COLOURS.WHITE
    };
 
    grass = {
        height: 70,
        width: 20,
        y: height * 0.87
    };

    background(gfx.backgroundColour[0], gfx.backgroundColour[1], gfx.backgroundColour[2]);
    fill(gfx.bkgHud[0], gfx.bkgHud[1], gfx.bkgHud[2]);
    rect(0, 0, width, 30);
    fill(gfx.colourVal[0], gfx.colourVal[1], gfx.colourVal[2]);
    textSize(UI_STYLES.FONT_SIZE.MD);
    text(TEXT_LABELS.HUD.SCORE +
         app.userProgress.scoreTotal,
         10, 10, 100, 200);
    text(toysNeeded,
         200, 10, 100, 200);

    scroller = function(o) {
        var heightDev = o.heightDeviation,
            img = o.img,
            slowness = o.slowness,
            spacing = o.spacing;

        for (i = scrollX / slowness;
             i < width;
             i += grass.width * spacing) {

            image(getImage(img),
            i, grass.y - heightDev,
            grass.width, grass.height);
        }
    };

    treeTall = scroller({
        img: GRAPHICS.LEVEL.TREES.TALL,
        heightDeviation: 64,
        slowness: 7,
        spacing: 1.3
    });

    treeUgly = scroller({
        img: GRAPHICS.LEVEL.TREES.UGLY,
        heightDeviation: 50,
        slowness: 5,
        spacing: 2.9
    });

    treeUgly = scroller({
        img: GRAPHICS.LEVEL.TREES.SHORT,
        heightDeviation: 60,
        slowness: 3,
        spacing: 20
    });

    for (i = scrollX; i < width;
         i += grass.width) {
        image(getImage(GRAPHICS.LEVEL.GRASS.UPPER),
        i, grass.y - 20, grass.width, grass.height);
        image(getImage(GRAPHICS.LEVEL.GRASS.LOWER),
        i, grass.y, grass.width, grass.height);
    }
};


/*  Keep tabs on whether a sound has been played
    (in this version it checks that
     sound that ends the level has been played):
************************************************/

soundPlayed = false;


/*  Function to load screen 3:
************************************************/

screen3 = function() {
    if (!soundPlayed) {
        playSound(getSound(SOUNDS.END_LEVEL));
        soundPlayed = true;
    }

    var titleFooter,
        titleScreen,
        titleScreenBtn,
        titleScreenFooter;

    noStroke();

    titleScreen = CreateMenu({
        backgroundColor: UI_STYLES.COLOURS.DARK,
        color: UI_STYLES.COLOURS.WHITE,
        fontSize: UI_STYLES.FONT_SIZE.XL,
        text: [{
            values: CreateText(CENTER,
                    TEXT_LABELS.LEVEL_COMPLETE,
                    UI_STYLES.FONT_SIZE.LG - 5, 50,
                    width, 0, 125)
            }, {
            values: CreateText(CENTER,
                    TEXT_LABELS.YOU_DID_IT,
                    UI_STYLES.FONT_SIZE.SM,
                    40, width, 0, 180)
            }]
    });

    titleScreenBtn = CreateButton({
        backgroundColor: [
            UI_STYLES.COLOURS.RED[0],
            UI_STYLES.COLOURS.RED[1],
            UI_STYLES.COLOURS.RED[2]],
        color: [
            UI_STYLES.COLOURS.YELLOW[0],
            UI_STYLES.COLOURS.YELLOW[1],
            UI_STYLES.COLOURS.YELLOW[2]],
        fontSize: UI_STYLES.FONT_SIZE.LG,
        text: TEXT_LABELS.LEVEL_NEXT
    });
};


/*  Function to load screen 4 instructions:
************************************************/

screen4Instructions = function() {
    level = 2;
    if(!instructionStatus.screen4) {
        app.levelCountdown = app.COUNTDOWNVAL;
        instructionStatus.screen4 = true;
    }

    CreateInstructions({
        INSTRUCTIONS: {
            a: CONFIG.INSTRUCTIONS.LVL_2.TXT_I1A,
            b: CONFIG.INSTRUCTIONS.LVL_2.TXT_I1B
        }
    });

    if (app.levelCountdown >= 0) {
        app.levelCountdown -= 0.04;
    } else {
       screen4();
       scrollX -= speed;
       enableBeaver();
    }
};


/*  Function to load screen 4:
************************************************/

screen4 = function() {
    var backgroundColour, 
        backgroundHUD,
        colourVal,
        grass,
        rampNorth,
        scroller,
        treeUgly;

    soundPlayed = false;

    levelConditions({
        difficulty: 'normal',
        nextScore: 0,
        nextScreen: 5
    });

    speed = app.difficulty.NORMAL.scrollSpeed;
    backgroundColour = [0, 0, 0];
    backgroundHUD = UI_STYLES.COLOURS.DARK;
    colourVal = UI_STYLES.COLOURS.WHITE;
    grass = {
        height: 70,
        width: 40,
        y: height * 0.87
    };

    background(backgroundColour[0], backgroundColour[1], backgroundColour[2]);
    fill(backgroundHUD[0], backgroundHUD[1], backgroundHUD[2]);
    rect(0, 0, width, 30);
    fill(colourVal[0], colourVal[1], colourVal[2]);
    textSize(UI_STYLES.FONT_SIZE.MD);
    text(TEXT_LABELS.HUD.SCORE +
         app.userProgress.scoreTotal,
         10, 10, 100, 200);

    scroller = function(o) {
        var heightDev = o.heightDeviation,
            img = o.img,
            slowness = o.slowness,
            spacing = o.spacing;

        for (i = scrollX / slowness;
             i < width;
             i += grass.width * spacing) {

            image(getImage(img),
            i, grass.y - heightDev,
            grass.width, grass.height);
        }
    };

    rampNorth = scroller({
        img: GRAPHICS.LEVEL.STONE.RAMP_NORTH,
        heightDeviation: 64,
        slowness: 14,
        spacing: 2
    });

    treeUgly = scroller({
        img: "avatars/robot_male_2",
        heightDeviation: 45,
        slowness: 10,
        spacing: 20
    });

    for (i = scrollX; i < width;
         i += grass.width) {
        image(getImage("cute/WoodBlock"),
        i, grass.y - 20, grass.width, grass.height);
        image(getImage("cute/StoneBlock"),
        i, grass.y, grass.width, grass.height);
    }
};


/*  Function to load screen 5:
************************************************/

screen5 = function() {
    if (!soundPlayed) {
        playSound(getSound(SOUNDS.END_LEVEL));
        soundPlayed = true;
    }

    var titleFooter,
        titleScreen,
        titleScreenBtn,
        titleScreenFooter;

    noStroke();

    titleScreen = CreateMenu({
        backgroundColor: UI_STYLES.COLOURS.DARK,
        color: UI_STYLES.COLOURS.WHITE,
        fontSize: UI_STYLES.FONT_SIZE.XL,
        text: [{
            values: CreateText(CENTER,
                    TEXT_LABELS.LEVEL_COMPLETE,
                    UI_STYLES.FONT_SIZE.LG - 5, 50,
                    width, 0, 125)
            }, {
            values: CreateText(CENTER,
                    TEXT_LABELS.YOU_DID_IT,
                    UI_STYLES.FONT_SIZE.SM,
                    40, width, 0, 180)
            }]
    });

    titleScreenBtn = CreateButton({
        backgroundColor: [
            UI_STYLES.COLOURS.RED[0],
            UI_STYLES.COLOURS.RED[1],
            UI_STYLES.COLOURS.RED[2]],
        color: [
            UI_STYLES.COLOURS.YELLOW[0],
            UI_STYLES.COLOURS.YELLOW[1],
            UI_STYLES.COLOURS.YELLOW[2]],
        fontSize: UI_STYLES.FONT_SIZE.LG,
        text: TEXT_LABELS.FINISH
    });
    app.levelCountdown = 10;
};


/*  creditsFormat defines the style and
    dimensions of credits screen:
************************************************/

creditsFormat = {
    gapL: 100,
    gapM: 80,
    posY: 315,
    width: width
};


/*  Function to load complete game screen:
************************************************/

gameCompleteScreen = function() {
    if (!soundPlayed) {
        playSound(getSound(SOUNDS.END_LEVEL));
        soundPlayed = true;
    }

    var titleFooter,
        titleScreen,
        titleScreenBtn,
        titleScreenFooter;

    noStroke();

    titleScreen = CreateMenu({
        backgroundColor: UI_STYLES.COLOURS.DARK,
        color: UI_STYLES.COLOURS.WHITE,
        fontSize: UI_STYLES.FONT_SIZE.XL,
        text: [{
            values: CreateText(CENTER,
                    TEXT_LABELS.GAME_COMPLETE,
                    UI_STYLES.FONT_SIZE.LG - 5, 50,
                    width, 0, 125)
            }]
    });
    fill(255, 0, 0);
    text(TEXT_LABELS.CONGRATULATIONS, width/width/2, 100, width, 100);

    image(getImage(GRAPHICS.CHARACTER_SPRITE.COOL), 155, 200, 100, 100);
    image(getImage(GRAPHICS.CHARACTER_SPRITE.HAPPY), 101, 268, 35, 35);
    image(getImage(GRAPHICS.CHARACTER_SPRITE.HAPPY), 145, 267, 25, 25);
    image(getImage(GRAPHICS.CHARACTER_SPRITE.HAPPY), 261, 262, 35, 35);
    image(getImage(GRAPHICS.CHARACTER_SPRITE.HAPPY), 228, 284, 40, 40);
    image(getImage(GRAPHICS.CHARACTER_SPRITE.HAPPY), 143, 290, 45, 45);

    // Display this congratulations screen for a period before credits:
    
    if (app.levelCountdown > 0) {
        app.levelCountdown -= 0.03;
    } else {
        app.userProgress.screen = 7;
    }
};

gap = 100;


/*  creditsScreen animates rolling credit text:
************************************************/

creditsScreen = function() {
    if (creditsFormat.posY > -750) {
        creditsFormat.posY -= 1;
    } else {
        app.userProgress.screen = 1;
    }

    // Set a dark background with red text:

    background(0, 0, 0);
    fill(255, 0, 0);
    textSize(16);
    textAlign(CENTER);
    text(CREDITS.END_CREDIT_HEADING, 0, creditsFormat.posY, width, height);
    textAlign(CENTER);
    text(CREDITS.END_CREDIT_PROJECT, 0, creditsFormat.posY + creditsFormat.gapL, width, height);
    textAlign(CENTER);
    text(CREDITS.END_CREDIT_STARRING, 0, creditsFormat.posY + creditsFormat.gapL * 2, width, height);

    // Center the text:

    for (var i = 3, j = 0 ; j < CREDITS.END_CREDITS.length; j += 1, i += 0.5) {
        textAlign(CENTER);
        text(CREDITS.END_CREDITS[j][0] + '   -   ' +
             CREDITS.END_CREDITS[j][1], 0,
             creditsFormat.posY + creditsFormat.gapM * i, width, height);
    }
};


/*  Determine which interstitial to load on 
    screen:
************************************************/

interstitial = function(num) {
    switch(num) {
        case 2:
            screen2Instructions();
            break;
        case 4:
            screen4Instructions();
            break;
    }
};


/*  enableBeaver determines whether the beaver
    (Hoppy) can be played with. He is disabled
    and disappears on instruction and 
    interstitial screens, for example:
************************************************/

enableBeaver = function() {
    if (keyIsPressed && keyCode === 0) {
        beaver.hop();
    } else {
        beaver.fall();
    }

    beaver.draw();

    for (i = 0; i < items.length; i++) {
        items[i].draw();
        beaver.checkForItemGrab(items[i]);
        items[i].x -= speed;
    }

    for (i = 0; i < enemies.length; i++) {
        enemies[i].draw();
        beaver.checkForAttack(enemies[i]);
        enemies[i].x -= speed * 2;
    }
};


/*  disableMouse function:
************************************************/

disableMouse = function() {
    cursor();
    mouseReleased = function() { return false; };
};


/*  updateClock function provides new values
    for timers used throughout the game:
************************************************/

updateClock = function() {
    app.timeVal.h = hour();
    app.timeVal.m = minute();
    app.timeVal.s = second();
};


/*  Draw function loops throughout the game:
************************************************/

draw = function() {
    disableMouse();
    updateClock();

    // Switch statement to determines
    // which screen to display:

    switch(app.userProgress.screen) {
        case 1:
            screen1();
            break;
        case 2:
            interstitial(2);
            break;
        case 3:
            screen3();
            break;
        case 4:
            interstitial(4);
            break;
        case 5:
           screen5();
            break;
        case 6:
            gameCompleteScreen();
            break;
        case 7:
            app.levelCountdown = app.COUNTDOWNVAL;
            creditsScreen();
    }
};